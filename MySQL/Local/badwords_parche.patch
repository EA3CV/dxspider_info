--- /root/spider-watch/spider/perl/BadWords.pm  2025-04-29 19:19:36.102715666 +0200
+++ /root/volumenes/dxspider/nodo-6/local/BadWords.pm   2025-07-01 12:06:16.186513460 +0200
@@ -9,34 +9,47 @@
 package BadWords;

 use strict;
+use warnings;

 use DXUtil;
 use DXVars;
 use DXDebug;
-
 use IO::File;

-our $regex;                                    # the big bad regex generated from @relist
-our @relist; # the list of regexes to try, record = [canonical word, regex]
-my %in;        # the collection of words we are building up and their regexes
-
+our $regex;       # regex global generado
+our @relist;      # lista de [palabra, regex]
+my  %in;          # hash de palabras vistas
+
+my $self = {};    # instancia de mÃ³dulo (simulado)
+$self->{_db} = undef;
+
+# ============================
+# === INTERFAZ PRINCIPAL ====
+# ============================

-# load the badwords file(s)
-sub load
-{
+sub load {
        %in = ();
        @relist = ();
        $regex = '';

+    if ($main::db_backend && $main::db_backend eq 'mysql') {
+        require BadWords_DB;
+        $self->{_db} = BadWords_DB->new();
+        $self->{_db}->load_into(\%in, \@relist);
+        generate_regex();
+        dbg("BadWords: cargado desde MySQL");
+        return;
+    }
+
+    $self->{_db} = undef;
+
        my @inw;
        my @out;
        my $wasold;

-
        my $newfn = localdata("badword.new");
        filecopy("$main::data/badword.new.issue", $newfn) unless -e $newfn;
        if (-e $newfn) {
-               # new style
                dbg("BadWords: Found new style badword.new file");
                my $fh = new IO::File $newfn;
                if ($fh) {
@@ -46,25 +59,19 @@
                                add_regex(uc $_);
                        }
                        $fh->close;
-                       @relist = sort {$a->[0] cmp $b->[0]} @relist; # just in case...
+            @relist = sort {$a->[0] cmp $b->[0]} @relist;
                        dbg("BadWords: " . scalar @relist . " new style badwords read");
-               }
-               else {
+        } else {
                        my $l = "BadWords: can't open $newfn $!";
                        dbg($l);
                        push @out, $l;
                        return @out;
                }
-       }
-       else {
-
-               # using old style files
+    } else {
                my $bwfn = localdata("badword");
                filecopy("$main::data/badword.issue", $bwfn) unless -e $bwfn;

-               # parse the existing static file
                dbg("BadWords: Using old style badword file");
-
                my $fh = new IO::File $bwfn;
                if ($fh) {
                        my $line = 0;
@@ -81,20 +88,17 @@
                                push @inw, $line[0];
                        }
                        $fh->close;
-               }
-               else {
+        } else {
                        my $l = "BadWords: can't open $bwfn $!";
                        dbg($l);
                        push @out, $l;
                        return @out;
                }

-               # do the same for badw_regex
                my $regexfn = localdata("badw_regex");
                filecopy("$main::data/badw_regex.gb.issue", $regexfn) unless -e $regexfn;
                dbg("BadWords: Using old style badw_regex file");
                $fh = new IO::File $regexfn;
-
                if ($fh) {
                        while (<$fh>) {
                                chomp;
@@ -103,8 +107,7 @@
                                push @inw, split /\s+/, uc $_;
                        }
                        $fh->close;
-               }
-               else {
+        } else {
                        my $l = "BadWords: can't open $regexfn $!";
                        dbg($l);
                        push @out, $l;
@@ -114,62 +117,51 @@
                ++$wasold;
        }

-       # catch most of the potential duplicates
        @inw = sort @inw;
        for (@inw) {
                add_regex($_);
        }

-       # create the master regex
        generate_regex();
-
-       # use new style from now on
        put() if $wasold;

-
        return @out;
 }

-sub generate_regex
-{
-       my $res;
+sub put {
+    return $self->{_db}->put() if $self->{_db};
+
+    my @out;
+    my $newfn = localdata("badword.new");
+    my $fh = new IO::File ">$newfn";
+    if ($fh) {
+        dbg("BadWords: put new badword.new file");
        @relist = sort {$a->[0] cmp $b->[0]} @relist;
        for (@relist) {
-               $res .= qq{\\b(?:$_->[1]) |\n};
-       }
-       $res =~ s/\s*\|\s*$//;
-       $regex = qr/\b($res)/x;
+            print $fh "$_->[0]\n";
 }
-
-
-sub _cleanword
-{
-       my $w = uc shift;
-       $w =~ tr/01/OI/;                        # de-leet any incoming words
-       my $last = '';  # remove duplicate letters (eg BOLLOCKS > BOLOCKS)
-       my @w;
-       for (split //, $w) {
-               next if $last eq $_;
-               $last = $_;
-               push @w, $_;
+        $fh->close;
+    } else {
+        my $l = "BadWords: can't open $newfn $!";
+        dbg($l);
+        push @out, $l;
+        return @out;
        }
-       return @w ? join('', @w) : '';
 }

-sub add_regex
-{
+sub add_regex {
+    return $self->{_db}->add_regex(@_) if $self->{_db};
+
        my @list = split /\s+/, shift;
        my @out;

        for (@list) {
                my $w = uc $_;
                $w = _cleanword($w);
+        next unless $w && $w =~ /^\w+$/;
+        next if $in{$w};
+        next if _slowcheck($w);

-               next unless $w && $w =~ /^\w+$/; # has to be a word
-               next if $in{$w};           # ignore any we have already dealt with
-               next if _slowcheck($w); # check whether this will already be detected
-
-               # re-leet word (in regex speak)if required
                my @l = map { s/O/[O0]/g; s/I/[I1]/g; $_ } split //, $w;
                my $e = join '+[\s\W]*',  @l;
                my $q = $e;
@@ -181,8 +173,9 @@
        return @out;
 }

-sub del_regex
-{
+sub del_regex {
+    return $self->{_db}->del_regex(@_) if $self->{_db};
+
        my @list = split /\s+/, shift;
        my @out;

@@ -192,23 +185,23 @@
                next unless $in{$w};
                delete $in{$w};
                @relist = grep {$_->[0] ne $w} @relist;
-               push @out, $w
+        push @out, $w;
        }
        return @out;
 }

-sub list_regex
-{
+sub list_regex {
+    return $self->{_db}->list_regex(@_) if $self->{_db};
+
        my $full = shift;
        return map { $full ? "$_->[0] = $_->[1]" : $_->[0] } @relist;
 }

-# check the text against the badwords list
-sub check
-{
+sub check {
+    return $self->{_db}->check(@_) if $self->{_db};
+
        my $s = uc shift;
        my @out;
-
        if ($regex) {
                my %uniq;
                @out = grep {++$uniq{$_}; $uniq{$_} == 1 ? $_ : undef }($s =~ /($regex)/g);
@@ -219,37 +212,40 @@
        return;
 }

+# ============================
+# === FUNCIONES AUXILIARES ===
+# ============================

-sub _slowcheck
-{
-       my $w = shift;
-       my @out;
-
+sub generate_regex {
+    my $res;
+    @relist = sort {$a->[0] cmp $b->[0]} @relist;
        for (@relist) {
-               push @out, $w =~ /\b($_->[1])/;
+        $res .= qq{\\b(?:$_->[1]) |\n};
        }
-       return @out;
+    $res =~ s/\s*\|\s*$//;
+    $regex = qr/\b($res)/x;
 }

-# write out the new bad words list
-sub put
-{
+sub _cleanword {
+    my $w = uc shift;
+    $w =~ tr/01/OI/;
+    my $last = '';
+    my @w;
+    for (split //, $w) {
+        next if $last eq $_;
+        $last = $_;
+        push @w, $_;
+    }
+    return @w ? join('', @w) : '';
+}
+
+sub _slowcheck {
+    my $w = shift;
        my @out;
-       my $newfn = localdata("badword.new");
-       my $fh = new IO::File ">$newfn";
-       if ($fh) {
-               dbg("BadWords: put new badword.new file");
-               @relist = sort {$a->[0] cmp $b->[0]} @relist;
                for (@relist) {
-                       print $fh "$_->[0]\n";
-               }
-               $fh->close;
+        push @out, $w =~ /\b($_->[1])/;
        }
-       else {
-               my $l = "BadWords: can't open $newfn $!";
-               dbg($l);
-               push @out, $l;
                return @out;
        }
-}
+
 1;
